@model Chefster.ViewModels.OverviewViewModel

<div class="container">
    <div id="countdown">
    </div>
    <div class="container text-center fs-1 mb-5" style="max-width: 800px">
        <div class="row fs-2 mt-5 mb-4">
            <div class="col-12">
                Get ready! You will receive your recipes in:
            </div>
        </div>
        <div class="row gap-2 mt-4">
            <div class="col-0 col-md-1 col-lg-1 col-xl-1"></div>
            <div class="col-2 border border-3 border-primary rounded-3 py-4 vstack bg-light">
                <div id="days"></div>
                <div class="fs-5">days</div>
            </div>
            <div class="col-2 border border-3 border-primary rounded-3 py-4 vstack bg-light">
                <div id="hours"></div>
                <div class="fs-5">hours</div>
            </div>
            <div class="col-2 border border-3 border-primary rounded-3 py-4 vstack bg-light">
                <div id="minutes"></div>
                <div class="fs-5">minutes</div>
            </div>
            <div class="col-2 border border-3 border-primary rounded-3 py-4 vstack bg-light">
                <div id="seconds"></div>
                <div class="fs-5">seconds</div>
            </div>
            <div class="col-0 col-md-1 col-lg-1 col-xl-1"></div>
        </div>
    </div>
    @if (Model.Recipes.Count > 0)
    {
        <div class="container mt-5 pt-5">
            <div class="fs-2 mb-2 text-center">Did you enjoy these recipes?</div>
            @foreach (var dateGroup in Model.Recipes)
            {
                <div class="fs-3 text-end">@dateGroup.Key.ToString("dddd, MMMM d, yyyy")</div>
                <hr>
                <div class="container">
                    @foreach (var mealTypeGroup in dateGroup.Value)
                    {
                        <div class="row justify-content-center fs-5 fw-bold mt-2">
                            <div class="col-8 col-md-5 col-lg-5 col-xl-5 col-xxl-5">
                                @mealTypeGroup.Key
                            </div>
                            <div class="col-4 col-md-2 col-lg-2 col-xl-2 col-xxl-2"></div>
                        </div>
                        @foreach (var recipe in mealTypeGroup.Value)
                        {
                            <div class="row justify-content-center mb-2">
                                <div class="col-8 col-md-5 col-lg-5 col-xl-5 col-xxl-5 fs-5">@recipe.DishName</div>
                                <div class="col-4 col-md-2 col-lg-2 col-xl-2 col-xxl-2 hstack">
                                    <div>
                                            <input type="radio" class="btn-check" name="@recipe.RecipeId" id="@recipe.RecipeId-yes" autocomplete="off" @(recipe.Enjoyed == true ? "checked" : "") onchange="updateRecipeEnjoyment('@recipe.RecipeId', true)">
                                            <label class="btn btn-outline-success" for="@recipe.RecipeId-yes" style="border-top-right-radius: 0px; border-bottom-right-radius: 0px;">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-hand-thumbs-up" viewBox="0 0 17 17">
                                                    <path d="M8.864.046C7.908-.193 7.02.53 6.956 1.466c-.072 1.051-.23 2.016-.428 2.59-.125.36-.479 1.013-1.04 1.639-.557.623-1.282 1.178-2.131 1.41C2.685 7.288 2 7.87 2 8.72v4.001c0 .845.682 1.464 1.448 1.545 1.07.114 1.564.415 2.068.723l.048.03c.272.165.578.348.97.484.397.136.861.217 1.466.217h3.5c.937 0 1.599-.477 1.934-1.064a1.86 1.86 0 0 0 .254-.912c0-.152-.023-.312-.077-.464.201-.263.38-.578.488-.901.11-.33.172-.762.004-1.149.069-.13.12-.269.159-.403.077-.27.113-.568.113-.857 0-.288-.036-.585-.113-.856a2 2 0 0 0-.138-.362 1.9 1.9 0 0 0 .234-1.734c-.206-.592-.682-1.1-1.2-1.272-.847-.282-1.803-.276-2.516-.211a10 10 0 0 0-.443.05 9.4 9.4 0 0 0-.062-4.509A1.38 1.38 0 0 0 9.125.111zM11.5 14.721H8c-.51 0-.863-.069-1.14-.164-.281-.097-.506-.228-.776-.393l-.04-.024c-.555-.339-1.198-.731-2.49-.868-.333-.036-.554-.29-.554-.55V8.72c0-.254.226-.543.62-.65 1.095-.3 1.977-.996 2.614-1.708.635-.71 1.064-1.475 1.238-1.978.243-.7.407-1.768.482-2.85.025-.362.36-.594.667-.518l.262.066c.16.04.258.143.288.255a8.34 8.34 0 0 1-.145 4.725.5.5 0 0 0 .595.644l.003-.001.014-.003.058-.014a9 9 0 0 1 1.036-.157c.663-.06 1.457-.054 2.11.164.175.058.45.3.57.65.107.308.087.67-.266 1.022l-.353.353.353.354c.043.043.105.141.154.315.048.167.075.37.075.581 0 .212-.027.414-.075.582-.05.174-.111.272-.154.315l-.353.353.353.354c.047.047.109.177.005.488a2.2 2.2 0 0 1-.505.805l-.353.353.353.354c.006.005.041.05.041.17a.9.9 0 0 1-.121.416c-.165.288-.503.56-1.066.56z"/>
                                                </svg>
                                            </label>
                                    </div>
                                    <div>
                                        <input type="radio" class="btn-check" name="@recipe.RecipeId" id="@recipe.RecipeId-meh" autocomplete="off" @(recipe.Enjoyed == null ? "checked" : "") onchange="updateRecipeEnjoyment('@recipe.RecipeId', null)">
                                        <label class="btn btn-outline-secondary" for="@recipe.RecipeId-meh" style="border-radius: 0px;">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-dash-lg" viewBox="0 0 17 17">
                                                <path fill-rule="evenodd" d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8"/>
                                            </svg>
                                        </label>
                                    </div>
                                    <div>
                                        <input type="radio" class="btn-check" name="@recipe.RecipeId" id="@recipe.RecipeId-no" autocomplete="off" @(recipe.Enjoyed == false ? "checked" : "") onchange="updateRecipeEnjoyment('@recipe.RecipeId', false)">
                                        <label class="btn btn-outline-danger" for="@recipe.RecipeId-no" style="border-top-left-radius: 0px; border-bottom-left-radius: 0px;">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-hand-thumbs-down" viewBox="0 0 17 17">
                                                <path d="M8.864 15.674c-.956.24-1.843-.484-1.908-1.42-.072-1.05-.23-2.015-.428-2.59-.125-.36-.479-1.012-1.04-1.638-.557-.624-1.282-1.179-2.131-1.41C2.685 8.432 2 7.85 2 7V3c0-.845.682-1.464 1.448-1.546 1.07-.113 1.564-.415 2.068-.723l.048-.029c.272-.166.578-.349.97-.484C6.931.08 7.395 0 8 0h3.5c.937 0 1.599.478 1.934 1.064.164.287.254.607.254.913 0 .152-.023.312-.077.464.201.262.38.577.488.9.11.33.172.762.004 1.15.069.13.12.268.159.403.077.27.113.567.113.856s-.036.586-.113.856c-.035.12-.08.244-.138.363.394.571.418 1.2.234 1.733-.206.592-.682 1.1-1.2 1.272-.847.283-1.803.276-2.516.211a10 10 0 0 1-.443-.05 9.36 9.36 0 0 1-.062 4.51c-.138.508-.55.848-1.012.964zM11.5 1H8c-.51 0-.863.068-1.14.163-.281.097-.506.229-.776.393l-.04.025c-.555.338-1.198.73-2.49.868-.333.035-.554.29-.554.55V7c0 .255.226.543.62.65 1.095.3 1.977.997 2.614 1.709.635.71 1.064 1.475 1.238 1.977.243.7.407 1.768.482 2.85.025.362.36.595.667.518l.262-.065c.16-.04.258-.144.288-.255a8.34 8.34 0 0 0-.145-4.726.5.5 0 0 1 .595-.643h.003l.014.004.058.013a9 9 0 0 0 1.036.157c.663.06 1.457.054 2.11-.163.175-.059.45-.301.57-.651.107-.308.087-.67-.266-1.021L12.793 7l.353-.354c.043-.042.105-.14.154-.315.048-.167.075-.37.075-.581s-.027-.414-.075-.581c-.05-.174-.111-.273-.154-.315l-.353-.354.353-.354c.047-.047.109-.176.005-.488a2.2 2.2 0 0 0-.505-.804l-.353-.354.353-.354c.006-.005.041-.05.041-.17a.9.9 0 0 0-.121-.415C12.4 1.272 12.063 1 11.5 1"/>
                                            </svg>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        function updateRecipeEnjoyment(recipeId, enjoyed) {
            fetch('/previousRecipe', {
                method: 'Put',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    recipeId: recipeId,
                    enjoyed: enjoyed
                })
            })
                .then(response => response.json())
                .then(data => {
                    // needs logging
                    console.log('Success:', data);
                })
                .catch((error) => {
                    // needs logging
                    console.error('Error:', error);
                });
        }

        document.addEventListener("DOMContentLoaded", () => {
            const daysElement = document.getElementById('days')
            const hoursElement = document.getElementById('hours')
            const minutesElement = document.getElementById('minutes')
            const secondsElement = document.getElementById('seconds')

            function getNextTargetDate(targetDay, targetTime) {
                let now = new Date();
                let daysUntilTarget = (targetDay - now.getDay() + 7) % 7;
                let nextTarget = new Date(now.getFullYear(), now.getMonth(), now.getDate() + daysUntilTarget);
                nextTarget.setHours(targetTime.hours, targetTime.minutes, targetTime.seconds);

                if (nextTarget <= now) {
                    nextTarget.setDate(nextTarget.getDate() + 7);
                }

                return nextTarget;
            }

            function updateCountdown() {
                const targetDay = @((int)Model.GenerationDay);
                const targetTime = {
                    hours: @Model.GenerationTime.Hours,
                    minutes: @Model.GenerationTime.Minutes,
                    seconds: @Model.GenerationTime.Seconds 
                    };

                const nextTarget = getNextTargetDate(targetDay, targetTime);
                const now = new Date();
                const difference = nextTarget - now;

                if (difference > 0) {
                    const days = Math.floor(difference / (1000 * 60 * 60 * 24));
                    const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((difference % (1000 * 60)) / 1000);

                    daysElement.innerHTML = days
                    hoursElement.innerHTML = hours
                    minutesElement.innerHTML = minutes
                    secondsElement.innerHTML = seconds
                } else {
                    document.getElementById('countdown').innerHTML = "It's time!";
                }
            }

            updateCountdown();
            setInterval(updateCountdown, 1000);
        })
    </script>
}